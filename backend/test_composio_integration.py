#!/usr/bin/env python3
"""
Test Composio Integration - Cross-Platform Automation
"""
import os
import asyncio
import json
from datetime import datetime, timedelta

# Load environment variables
from dotenv import load_dotenv
load_dotenv()

# Setup Django
import django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'main.settings')
django.setup()

from django.contrib.auth import get_user_model
from rest_framework_simplejwt.tokens import RefreshToken
import requests

def get_auth_token():
    """Get JWT token for API authentication"""
    User = get_user_model()
    user = User.objects.filter(username='admin_constructco').first()
    if not user:
        user = User.objects.filter(is_superuser=True).first()
    
    refresh = RefreshToken.for_user(user)
    return str(refresh.access_token), user

def test_composio_status():
    """Test Composio status endpoint"""
    print('üîç Testing Composio Status...')
    try:
        token, user = get_auth_token()
        response = requests.get(
            'http://localhost:8000/api/agent/composio/status/',
            headers={
                'Authorization': f'Bearer {token}',
                'Content-Type': 'application/json'
            },
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            print('‚úÖ Composio Status Retrieved!')
            print(f'  Composio Available: {result.get("composio_available")}')
            print(f'  API Key Configured: {result.get("api_key_configured")}')
            print(f'  Connected Apps: {", ".join(result.get("connected_apps", []))}')
            print(f'  Total Tools: {result.get("total_tools", 0)}')
            print(f'  Available Platforms: {", ".join(result.get("available_platforms", []))}')
            return result
        else:
            print(f'‚ùå Error {response.status_code}: {response.text}')
            return None
            
    except Exception as e:
        print(f'‚ùå Request failed: {str(e)}')
        return None

def test_slack_notification():
    """Test Slack notification"""
    print('\nüí¨ Testing Slack Notification...')
    try:
        token, user = get_auth_token()
        response = requests.post(
            'http://localhost:8000/api/agent/composio/slack-notify/',
            json={
                'channel': '#supply-chain-alerts',
                'message': f'üö® **AUTOMATED TEST ALERT** üö®\n\nTesting LOGI-BOT Composio integration at {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}\n\nSteel Rods stock level critical: Only 150 units remaining!\nMinimum threshold: 500 units\n\n‚ö° Powered by LOGI-BOT',
                'urgency': 'high'
            },
            headers={
                'Authorization': f'Bearer {token}',
                'Content-Type': 'application/json'
            },
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            print('‚úÖ Slack Notification Sent!')
            print(f'  Channel: {result.get("channel")}')
            print(f'  Message ID: {result.get("message_id", "N/A")}')
        else:
            print(f'‚ùå Error {response.status_code}: {response.text}')
            
    except Exception as e:
        print(f'‚ùå Request failed: {str(e)}')

def test_asana_task():
    """Test Asana task creation"""
    print('\nüìã Testing Asana Task Creation...')
    try:
        token, user = get_auth_token()
        response = requests.post(
            'http://localhost:8000/api/agent/composio/asana-task/',
            json={
                'title': f'ü§ñ LOGI-BOT Alert: Steel Rods Restocking Required',
                'description': f'''**AUTOMATED SUPPLY CHAIN ALERT**

üìä **Current Situation:**
- Product: Steel Rods (Construction Grade)
- Current Stock: 150 units
- Minimum Threshold: 500 units
- Shortage: 350 units
- Urgency Level: HIGH

üéØ **Required Actions:**
1. Contact suppliers for immediate delivery
2. Check alternative suppliers for faster delivery
3. Notify production team of potential delays
4. Update procurement schedule

üìÖ **Timeline:**
- Alert Generated: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
- Action Required By: {(datetime.now() + timedelta(hours=24)).strftime("%Y-%m-%d %H:%M:%S")}

ü§ñ **Generated by:** LOGI-BOT Autonomous Supply Chain Agent
''',
                'priority': 'High'
            },
            headers={
                'Authorization': f'Bearer {token}',
                'Content-Type': 'application/json'
            },
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            print('‚úÖ Asana Task Created!')
            print(f'  Task ID: {result.get("task_id", "N/A")}')
            print(f'  Task URL: {result.get("task_url", "N/A")}')
        else:
            print(f'‚ùå Error {response.status_code}: {response.text}')
            
    except Exception as e:
        print(f'‚ùå Request failed: {str(e)}')

def test_email_notification():
    """Test Gmail notification"""
    print('\nüìß Testing Gmail Notification...')
    try:
        token, user = get_auth_token()
        response = requests.post(
            'http://localhost:8000/api/agent/composio/email-notify/',
            json={
                'to_email': 'venkatesh.k21062005@gmail.com',  # Using the configured email
                'subject': 'URGENT: Critical Stock Alert - Steel Rods',
                'body': f'''Dear Supply Chain Manager,

üö® **CRITICAL STOCK ALERT** üö®

This is an automated notification from your LOGI-BOT Supply Chain Agent regarding a critical inventory situation that requires immediate attention.

**PRODUCT DETAILS:**
‚Ä¢ Item: Steel Rods (Construction Grade)
‚Ä¢ Current Stock Level: 150 units
‚Ä¢ Minimum Threshold: 500 units
‚Ä¢ Stock Shortage: 350 units (70% below minimum)
‚Ä¢ Status: CRITICAL - Immediate Action Required

**RECOMMENDED ACTIONS:**
1. ‚ö° Contact primary suppliers immediately for emergency delivery
2. üìû Reach out to alternative suppliers for backup stock
3. üè≠ Notify production team of potential material shortages
4. üìÖ Reschedule delivery timelines if necessary
5. üí∞ Consider expedited shipping options

**IMPACT ASSESSMENT:**
‚Ä¢ Production Risk: HIGH
‚Ä¢ Customer Delivery Risk: MEDIUM
‚Ä¢ Revenue Impact: Potential delays in {((datetime.now() + timedelta(days=3)).strftime("%Y-%m-%d"))}

**ALERT DETAILS:**
‚Ä¢ Alert ID: LOGI-{datetime.now().strftime("%Y%m%d%H%M%S")}
‚Ä¢ Generated: {datetime.now().strftime("%Y-%m-%d %H:%M:%S UTC")}
‚Ä¢ Next Review: {(datetime.now() + timedelta(hours=6)).strftime("%Y-%m-%d %H:%M:%S UTC")}

Please take immediate action to resolve this critical inventory situation.

---
ü§ñ **Automated Alert from LOGI-BOT**
Advanced AI-Powered Supply Chain Management System

For technical support or to modify alert settings, please contact your system administrator.
'''
            },
            headers={
                'Authorization': f'Bearer {token}',
                'Content-Type': 'application/json'
            },
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            print('‚úÖ Gmail Notification Sent!')
            print(f'  Message ID: {result.get("message_id", "N/A")}')
            print(f'  Recipient: {result.get("recipient")}')
        else:
            print(f'‚ùå Error {response.status_code}: {response.text}')
            
    except Exception as e:
        print(f'‚ùå Request failed: {str(e)}')

def test_cross_platform_workflow():
    """Test comprehensive cross-platform workflow"""
    print('\nüåê Testing Cross-Platform Workflow...')
    try:
        token, user = get_auth_token()
        response = requests.post(
            'http://localhost:8000/api/agent/composio/create-workflow/',
            json={
                'alert_data': {
                    'product_name': 'Steel Rods',
                    'current_stock': 150,
                    'minimum_threshold': 500,
                    'urgency': 'high',
                    'supplier_contact': 'steel-supplier@company.com',
                    'estimated_delivery_time': '2-3 business days',
                    'procurement_budget': '$25,000'
                },
                'platforms': ['asana', 'slack', 'gmail', 'sheets', 'calendar']
            },
            headers={
                'Authorization': f'Bearer {token}',
                'Content-Type': 'application/json'
            },
            timeout=60  # Longer timeout for workflow
        )
        
        if response.status_code == 200:
            result = response.json()
            print('‚úÖ Cross-Platform Workflow Executed!')
            print(f'  Workflow ID: {result.get("workflow_id")}')
            print(f'  Success Rate: {result.get("success_rate", 0):.1f}%')
            print(f'  Platforms Executed: {", ".join(result.get("platforms_executed", []))}')
            
            # Show detailed results
            for platform, platform_result in result.get('results', {}).items():
                status_icon = "‚úÖ" if platform_result.get('success') else "‚ùå"
                message = platform_result.get('message', platform_result.get('error', 'Unknown'))
                print(f'    {status_icon} {platform.title()}: {message}')
                
        else:
            print(f'‚ùå Error {response.status_code}: {response.text}')
            
    except Exception as e:
        print(f'‚ùå Request failed: {str(e)}')

def test_schedule_meeting():
    """Test calendar meeting scheduling"""
    print('\nüìÖ Testing Meeting Scheduling...')
    try:
        token, user = get_auth_token()
        
        # Schedule meeting for 2 hours from now
        meeting_time = datetime.now() + timedelta(hours=2)
        
        response = requests.post(
            'http://localhost:8000/api/agent/composio/schedule-meeting/',
            json={
                'title': 'Emergency Steel Rods Stock Review',
                'start_time': meeting_time.isoformat() + 'Z',
                'duration_hours': 1,
                'attendees': [
                    'venkatesh.k21062005@gmail.com',
                    'cb.sc.u4cse23519@cb.students.amrita.edu'
                ]
            },
            headers={
                'Authorization': f'Bearer {token}',
                'Content-Type': 'application/json'
            },
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            print('‚úÖ Meeting Scheduled!')
            print(f'  Event ID: {result.get("event_id", "N/A")}')
            print(f'  Meeting Link: {result.get("event_link", "N/A")}')
            print(f'  Attendees: {result.get("attendees_count", 0)} people')
        else:
            print(f'‚ùå Error {response.status_code}: {response.text}')
            
    except Exception as e:
        print(f'‚ùå Request failed: {str(e)}')

def main():
    """Main test function"""
    print('üöÄ LOGI-BOT COMPOSIO INTEGRATION TEST')
    print('=' * 60)
    print('Testing comprehensive cross-platform automation capabilities')
    print('Platforms: Slack, Asana, Gmail, Google Sheets, Calendar, GitHub')
    print('=' * 60)
    
    # Test all Composio features
    composio_status = test_composio_status()
    
    if composio_status and composio_status.get('composio_available'):
        test_slack_notification()
        test_asana_task()
        test_email_notification()
        test_schedule_meeting()
        test_cross_platform_workflow()
    else:
        print('\n‚ö†Ô∏è Composio not fully configured. Some tests skipped.')
        print('To enable full functionality:')
        print('1. Ensure Composio API key is valid')
        print('2. Connect apps at https://app.composio.dev')
        print('3. Authorize required platforms (Slack, Asana, Gmail, etc.)')
    
    print('\nüéâ COMPOSIO INTEGRATION TESTING COMPLETE!')
    print('=' * 60)

if __name__ == '__main__':
    main()